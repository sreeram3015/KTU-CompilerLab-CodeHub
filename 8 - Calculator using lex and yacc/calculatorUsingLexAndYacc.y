%{
#include<stdio.h>

// Flag to track the validity of the arithmetic expression
int flag = 0;
%}

// Define a token for numbers
%token NUMBER

// Define precedence and associativity of operators
%left '+' '-'
%left '*' '/' '%'
%left '(' ')'

// Grammar rules
%%
ArithmeticExpression: E {
    // Print the result when the parsing is complete
    printf("\nResult=%d\n", $$);
    return 0;
};

E: E'+'E { $$ = $1 + $3; }   // Addition
 | E'-'E { $$ = $1 - $3; }   // Subtraction
 | E'*'E { $$ = $1 * $3; }   // Multiplication
 | E'/'E { $$ = $1 / $3; }   // Division
 | E'%'E { $$ = $1 % $3; }   // Modulus
 | '('E')' { $$ = $2; }       // Parentheses
 | NUMBER { $$ = $1; }        // Numbers
;

%%

// Main function
void main()
{
    printf("\nEnter Any Arithmetic Expression which can have operations Addition, Subtraction, Multiplication, Division, Modulus, and Round brackets:\n");

    // Invoke the parser generated by Bison
    yyparse();

    // Check the flag to determine if the expression is valid
    if (flag == 0)
        printf("\nEntered arithmetic expression is Valid\n\n");
}

// Error handling function for Bison
void yyerror()
{
    printf("\nEntered arithmetic expression is Invalid\n\n");
    flag = 1;
}

